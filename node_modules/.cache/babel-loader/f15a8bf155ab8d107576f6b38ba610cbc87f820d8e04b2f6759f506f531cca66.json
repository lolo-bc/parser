{"ast":null,"code":"var _jsxFileName = \"/Users/laurencameron/Desktop/TestRepo/my-app/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [outputText, setOutputText] = useState('');\n  function generateTypeScriptInterface(obj) {\n    let interfaceString = 'interface ParsedObjectType {\\n';\n    for (const key in obj) {\n      const type = typeof obj[key];\n      interfaceString += `  ${key}: ${type};\\n`;\n    }\n    interfaceString += '}';\n    return interfaceString;\n  }\n\n  // Generate TypeScript interface:\n  // Output:\n  // interface ParsedObjectType {\n  //   id: string;\n  //   label: string;\n  // }\n\n  const parseText = text => {\n    const lines = text.split('\\n');\n    const result = {};\n    lines.forEach(line => {\n      const [key, ...valueParts] = line.split(':').map(part => part.trim());\n      if (key && valueParts.length > 0) {\n        const value = valueParts.join(':').replace(/^\"|\"$/g, ''); // Remove wrapping quotes\n        result[key] = isNaN(Number(value)) ? value : Number(value); // Convert to number if applicable\n      }\n    });\n    return result;\n  };\n  const handleParse = () => {\n    const parsedObject = parseText(inputText);\n    console.log('parsedObject', parsedObject);\n    console.log(generateTypeScriptInterface(parsedObject));\n    setOutputText(JSON.stringify(parsedObject, null, 2)); // Pretty-print JSON\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Text Parser\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: inputText,\n      onChange: e => setInputText(e.target.value),\n      placeholder: \"Paste your text here\",\n      style: {\n        width: '100%',\n        height: '150px',\n        marginBottom: '10px',\n        fontFamily: 'monospace'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleParse,\n      style: {\n        marginBottom: '10px',\n        padding: '10px 20px'\n      },\n      children: \"Parse Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: outputText,\n      readOnly: true,\n      placeholder: \"Output will appear here\",\n      style: {\n        width: '100%',\n        height: '150px',\n        fontFamily: 'monospace'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"A8x4o6k2o0clyglOPj0vqGJjHFk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","inputText","setInputText","outputText","setOutputText","generateTypeScriptInterface","obj","interfaceString","key","type","parseText","text","lines","split","result","forEach","line","valueParts","map","part","trim","length","value","join","replace","isNaN","Number","handleParse","parsedObject","console","log","JSON","stringify","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","placeholder","width","height","marginBottom","onClick","readOnly","_c","$RefreshReg$"],"sources":["/Users/laurencameron/Desktop/TestRepo/my-app/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [inputText, setInputText] = useState<string>('');\n  const [outputText, setOutputText] = useState<string>('');\n\n  function generateTypeScriptInterface(obj: Record<string, any>): string {\n    let interfaceString = 'interface ParsedObjectType {\\n';\n    for (const key in obj) {\n      const type = typeof obj[key];\n      interfaceString += `  ${key}: ${type};\\n`;\n    }\n    interfaceString += '}';\n    return interfaceString;\n  }\n  \n  // Generate TypeScript interface:\n  // Output:\n  // interface ParsedObjectType {\n  //   id: string;\n  //   label: string;\n  // }\n  \n\n  const parseText = (text: string): Record<string, any> => {\n    const lines = text.split('\\n');\n    const result: Record<string, any> = {};\n\n    lines.forEach((line) => {\n      const [key, ...valueParts] = line.split(':').map((part) => part.trim());\n      if (key && valueParts.length > 0) {\n        const value = valueParts.join(':').replace(/^\"|\"$/g, ''); // Remove wrapping quotes\n        result[key] = isNaN(Number(value)) ? value : Number(value); // Convert to number if applicable\n      }\n    });\n\n    return result;\n  };\n\n  const handleParse = () => {\n    const parsedObject = parseText(inputText);\n    console.log('parsedObject', parsedObject);\n    console.log(generateTypeScriptInterface(parsedObject));\n    setOutputText(JSON.stringify(parsedObject, null, 2)); // Pretty-print JSON\n  };\n\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n      <h1>Text Parser</h1>\n      <textarea\n        value={inputText}\n        onChange={(e) => setInputText(e.target.value)}\n        placeholder=\"Paste your text here\"\n        style={{\n          width: '100%',\n          height: '150px',\n          marginBottom: '10px',\n          fontFamily: 'monospace',\n        }}\n      />\n      <button onClick={handleParse} style={{ marginBottom: '10px', padding: '10px 20px' }}>\n        Parse Text\n      </button>\n      <textarea\n        value={outputText}\n        readOnly\n        placeholder=\"Output will appear here\"\n        style={{\n          width: '100%',\n          height: '150px',\n          fontFamily: 'monospace',\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}