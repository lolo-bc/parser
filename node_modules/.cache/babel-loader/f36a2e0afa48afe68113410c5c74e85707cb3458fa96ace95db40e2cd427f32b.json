{"ast":null,"code":"var _jsxFileName = \"/Users/laurencameron/Desktop/TestRepo/my-app/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [outputText, setOutputText] = useState('');\n  function generateTypeScriptInterface(obj) {\n    let interfaceString = 'interface ParsedObjectType {\\n';\n    for (const key in obj) {\n      const type = typeof obj[key];\n      interfaceString += `  ${key}: ${type};\\n`;\n    }\n    interfaceString += '}';\n    return interfaceString;\n  }\n\n  // Generate TypeScript interface:\n  // Output:\n  // interface ParsedObjectType {\n  //   id: string;\n  //   label: string;\n  // }\n\n  const parseText = text => {\n    const result = {};\n    const lines = text.split('\\n').map(line => line.trim()).filter(line => line);\n    for (let i = 0; i < lines.length; i++) {\n      const key = lines[i].replace(':', '').trim();\n      if (i + 1 < lines.length && lines[i + 1].startsWith(':')) {\n        var _lines;\n        const value = (_lines = lines[i + 2]) === null || _lines === void 0 ? void 0 : _lines.replace(/^\"|\"$/g, '').trim();\n        result[key] = isNaN(Number(value)) ? value : Number(value);\n        i += 2; // Move the index forward to skip processed lines\n      }\n    }\n    return result;\n  };\n  const handleParse = () => {\n    const parsedObject = parseText(inputText);\n    console.log('parsedObject', parsedObject);\n    console.log(generateTypeScriptInterface(parsedObject));\n    const typescript = generateTypeScriptInterface(parsedObject);\n    setOutputText(JSON.stringify(typescript, null, 2)); // Pretty-print JSON\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Text Parser\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: inputText,\n      onChange: e => setInputText(e.target.value),\n      placeholder: \"Paste your text here\",\n      style: {\n        width: '100%',\n        height: '150px',\n        marginBottom: '10px',\n        fontFamily: 'monospace'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleParse,\n      style: {\n        marginBottom: '10px',\n        padding: '10px 20px'\n      },\n      children: \"Parse Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: outputText,\n      readOnly: true,\n      placeholder: \"Output will appear here\",\n      style: {\n        width: '100%',\n        height: '150px',\n        fontFamily: 'monospace'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"A8x4o6k2o0clyglOPj0vqGJjHFk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","inputText","setInputText","outputText","setOutputText","generateTypeScriptInterface","obj","interfaceString","key","type","parseText","text","result","lines","split","map","line","trim","filter","i","length","replace","startsWith","_lines","value","isNaN","Number","handleParse","parsedObject","console","log","typescript","JSON","stringify","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","placeholder","width","height","marginBottom","onClick","readOnly","_c","$RefreshReg$"],"sources":["/Users/laurencameron/Desktop/TestRepo/my-app/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst App: React.FC = () => {\n  const [inputText, setInputText] = useState<string>('');\n  const [outputText, setOutputText] = useState<string>('');\n\n  function generateTypeScriptInterface(obj: Record<string, any>): string {\n    let interfaceString = 'interface ParsedObjectType {\\n';\n    for (const key in obj) {\n      const type = typeof obj[key];\n      interfaceString += `  ${key}: ${type};\\n`;\n    }\n    interfaceString += '}';\n    return interfaceString;\n  }\n\n  // Generate TypeScript interface:\n  // Output:\n  // interface ParsedObjectType {\n  //   id: string;\n  //   label: string;\n  // }\n\n\n  const parseText = (text: string): Record<string, any> => {\n    const result: Record<string, any> = {};\n    const lines = text.split('\\n').map(line => line.trim()).filter(line => line);\n\n    for (let i = 0; i < lines.length; i++) {\n      const key = lines[i].replace(':', '').trim();\n      if (i + 1 < lines.length && lines[i + 1].startsWith(':')) {\n        const value = lines[i + 2]?.replace(/^\"|\"$/g, '').trim();\n        result[key] = isNaN(Number(value)) ? value : Number(value);\n        i += 2; // Move the index forward to skip processed lines\n      }\n    }\n\n    return result;\n  };\n\n  const handleParse = () => {\n    const parsedObject = parseText(inputText);\n    console.log('parsedObject', parsedObject);\n    console.log(generateTypeScriptInterface(parsedObject));\n    const typescript = generateTypeScriptInterface(parsedObject)\n    setOutputText(JSON.stringify(typescript, null, 2)); // Pretty-print JSON\n  };\n\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n      <h1>Text Parser</h1>\n      <textarea\n        value={inputText}\n        onChange={(e) => setInputText(e.target.value)}\n        placeholder=\"Paste your text here\"\n        style={{\n          width: '100%',\n          height: '150px',\n          marginBottom: '10px',\n          fontFamily: 'monospace',\n        }}\n      />\n      <button onClick={handleParse} style={{ marginBottom: '10px', padding: '10px 20px' }}>\n        Parse Text\n      </button>\n      <textarea\n        value={outputText}\n        readOnly\n        placeholder=\"Output will appear here\"\n        style={{\n          width: '100%',\n          height: '150px',\n          fontFamily: 'monospace',\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}